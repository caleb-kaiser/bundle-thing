export const apiRunDetail = {
  run: {
    id: "3d544f4e-45de-4527-abcc-98fc9a49b52d",
    name: "add_pipeline 2022-01-12 20-46-17",
    storage_state: null,
    description: null,
    pipeline_spec: {
      pipeline_id: null,
      pipeline_name: null,
      workflow_manifest:
        '{"apiVersion": "argoproj.io/v1alpha1", "kind": "Workflow", "metadata": {"generateName": "basic-comet-pipeline-", "annotations": {"pipelines.kubeflow.org/kfp_sdk_version": "1.8.9", "pipelines.kubeflow.org/pipeline_compilation_time": "2022-01-12T20:46:17.437708", "pipelines.kubeflow.org/pipeline_spec": "{\\"inputs\\": [{\\"default\\": \\"\\", \\"name\\": \\"pipeline-root\\"}, {\\"default\\": \\"pipeline/Basic Comet Pipeline\\", \\"name\\": \\"pipeline-name\\"}], \\"name\\": \\"Basic Comet Pipeline\\"}", "pipelines.kubeflow.org/v2_pipeline": "true"}, "labels": {"pipelines.kubeflow.org/v2_pipeline": "true", "pipelines.kubeflow.org/kfp_sdk_version": "1.8.9"}}, "spec": {"entrypoint": "basic-comet-pipeline", "templates": [{"name": "basic-comet-pipeline", "inputs": {"parameters": [{"name": "pipeline-name"}, {"name": "pipeline-root"}]}, "dag": {"tasks": [{"name": "comet-logger", "template": "comet-logger", "arguments": {"parameters": [{"name": "pipeline-name", "value": "{{inputs.parameters.pipeline-name}}"}, {"name": "pipeline-root", "value": "{{inputs.parameters.pipeline-root}}"}]}}, {"name": "dummy-component", "template": "dummy-component", "arguments": {"parameters": [{"name": "pipeline-name", "value": "{{inputs.parameters.pipeline-name}}"}, {"name": "pipeline-root", "value": "{{inputs.parameters.pipeline-root}}"}]}}, {"name": "dummy-component-2", "template": "dummy-component-2", "dependencies": ["dummy-component"], "arguments": {"parameters": [{"name": "dummy-component-Output", "value": "{{tasks.dummy-component.outputs.parameters.dummy-component-Output}}"}, {"name": "pipeline-name", "value": "{{inputs.parameters.pipeline-name}}"}, {"name": "pipeline-root", "value": "{{inputs.parameters.pipeline-root}}"}]}}, {"name": "dummy-component-3", "template": "dummy-component-3", "dependencies": ["dummy-component"], "arguments": {"parameters": [{"name": "dummy-component-Output", "value": "{{tasks.dummy-component.outputs.parameters.dummy-component-Output}}"}, {"name": "pipeline-name", "value": "{{inputs.parameters.pipeline-name}}"}, {"name": "pipeline-root", "value": "{{inputs.parameters.pipeline-root}}"}]}}, {"name": "dummy-component-4", "template": "dummy-component-4", "dependencies": ["dummy-component-2", "dummy-component-3"], "arguments": {"parameters": [{"name": "dummy-component-2-Output", "value": "{{tasks.dummy-component-2.outputs.parameters.dummy-component-2-Output}}"}, {"name": "dummy-component-3-Output", "value": "{{tasks.dummy-component-3.outputs.parameters.dummy-component-3-Output}}"}, {"name": "pipeline-name", "value": "{{inputs.parameters.pipeline-name}}"}, {"name": "pipeline-root", "value": "{{inputs.parameters.pipeline-root}}"}]}}]}}, {"name": "comet-logger", "container": {"args": ["sh", "-c", "(PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location \'comet_ml\' \'kfp\' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location \'comet_ml\' \'kfp\' --user) && \\"$0\\" \\"$@\\"", "sh", "-ec", "program_path=$(mktemp)\\nprintf \\"%s\\" \\"$0\\" > \\"$program_path\\"\\npython3 -u \\"$program_path\\" \\"$@\\"\\n", "def comet_logger(workflow_uid):\\n    import time\\n    import json\\n    import kfp\\n    from comet_ml import Experiment\\n\\n    # Create an experiment with your api key\\n    experiment = Experiment(\\n        api_key=\\"AnldYMXVqERr0n7Q3TKiBI4LI\\",\\n        project_name=\\"kubeflow_test\\",\\n        workspace=\\"jacques-comet\\",\\n    )\\n    experiment.set_name(f\'pipeline-tracking-{workflow_uid}\')\\n    experiment.log_other(\'kubeflow_run_id\', workflow_uid)\\n    experiment.log_other(\'kubeflow_task_type\', \'pipeline\')\\n    client = kfp.Client()\\n\\n    # Need to add a while condition based on the state of the pipeline so that it auto-terminates\\n    # Check there are\\n    pipeline_running = True\\n    iterator_nb = 0\\n    step = 0\\n\\n    while pipeline_running:\\n        run_data = client.get_run(workflow_uid)\\n        pipeline_state = json.loads(run_data.pipeline_runtime.workflow_manifest)[\'status\']\\n        experiment.log_asset_data(json.dumps(pipeline_state), step=step)\\n        experiment.log_asset_data(json.dumps(run_data.to_dict(), default=str), step= 1000 + step)\\n\\n        # Simple check that looks at the number of running tasks and if there is only one running for more\\n        # than 10 seconds stops monitoring the pipeline\\n        nb_tasks_running = sum([x[\'phase\'].lower() not in [\'succeeded\', \'failed\', \'skipped\', \'error\'] for x in pipeline_state[\\"nodes\\"].values() if x[\'type\'] != \'DAG\'])\\n\\n        if nb_tasks_running > 1:\\n            iterator_nb = 0\\n        else:\\n            iterator_nb += 1\\n\\n        if iterator_nb > 10:\\n            pipeline_running = False\\n\\n        step += 1\\n\\n        time.sleep(1)\\n\\n    print(f\\"Pipeline has finished running - number tasks running = {nb_tasks_running}, pipeline_running = {pipeline_running}\\")\\n    return None\\n\\nimport argparse\\n_parser = argparse.ArgumentParser(prog=\'Comet logger\', description=\'\')\\n_parser.add_argument(\\"--workflow-uid\\", dest=\\"workflow_uid\\", type=str, required=True, default=argparse.SUPPRESS)\\n_parsed_args = vars(_parser.parse_args())\\n\\n_outputs = comet_logger(**_parsed_args)\\n", "--workflow-uid", "{{$.inputs.parameters[\'workflow_uid\']}}"], "command": ["/kfp-launcher/launch", "--mlmd_server_address", "$(METADATA_GRPC_SERVICE_HOST)", "--mlmd_server_port", "$(METADATA_GRPC_SERVICE_PORT)", "--runtime_info_json", "$(KFP_V2_RUNTIME_INFO)", "--container_image", "$(KFP_V2_IMAGE)", "--task_name", "comet-logger", "--pipeline_name", "{{inputs.parameters.pipeline-name}}", "--run_id", "$(KFP_RUN_ID)", "--run_resource", "workflows.argoproj.io/$(WORKFLOW_ID)", "--namespace", "$(KFP_NAMESPACE)", "--pod_name", "$(KFP_POD_NAME)", "--pod_uid", "$(KFP_POD_UID)", "--pipeline_root", "{{inputs.parameters.pipeline-root}}", "--enable_caching", "$(ENABLE_CACHING)", "--", "workflow_uid={{workflow.uid}}", "--"], "env": [{"name": "KFP_POD_NAME", "valueFrom": {"fieldRef": {"fieldPath": "metadata.name"}}}, {"name": "KFP_POD_UID", "valueFrom": {"fieldRef": {"fieldPath": "metadata.uid"}}}, {"name": "KFP_NAMESPACE", "valueFrom": {"fieldRef": {"fieldPath": "metadata.namespace"}}}, {"name": "WORKFLOW_ID", "valueFrom": {"fieldRef": {"fieldPath": "metadata.labels[\'workflows.argoproj.io/workflow\']"}}}, {"name": "KFP_RUN_ID", "valueFrom": {"fieldRef": {"fieldPath": "metadata.labels[\'pipeline/runid\']"}}}, {"name": "ENABLE_CACHING", "valueFrom": {"fieldRef": {"fieldPath": "metadata.labels[\'pipelines.kubeflow.org/enable_caching\']"}}}, {"name": "KFP_V2_IMAGE", "value": "python:3.7"}, {"name": "KFP_V2_RUNTIME_INFO", "value": "{\\"inputParameters\\": {\\"workflow_uid\\": {\\"type\\": \\"STRING\\"}}, \\"inputArtifacts\\": {}, \\"outputParameters\\": {}, \\"outputArtifacts\\": {}}"}], "envFrom": [{"configMapRef": {"name": "metadata-grpc-configmap", "optional": true}}], "image": "python:3.7", "volumeMounts": [{"mountPath": "/kfp-launcher", "name": "kfp-launcher"}]}, "inputs": {"parameters": [{"name": "pipeline-name"}, {"name": "pipeline-root"}]}, "metadata": {"annotations": {"pipelines.kubeflow.org/v2_component": "true", "pipelines.kubeflow.org/component_ref": "{}", "pipelines.kubeflow.org/arguments.parameters": "{\\"workflow_uid\\": \\"{{workflow.uid}}\\"}"}, "labels": {"pipelines.kubeflow.org/kfp_sdk_version": "1.8.9", "pipelines.kubeflow.org/pipeline-sdk-type": "kfp", "pipelines.kubeflow.org/v2_component": "true", "pipelines.kubeflow.org/enable_caching": "false"}}, "initContainers": [{"command": ["launcher", "--copy", "/kfp-launcher/launch"], "image": "gcr.io/ml-pipeline/kfp-launcher:1.8.7", "name": "kfp-launcher", "mirrorVolumeMounts": true}], "volumes": [{"name": "kfp-launcher"}]}, {"name": "dummy-component", "container": {"args": ["sh", "-c", "(PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location \'comet_ml\' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location \'comet_ml\' --user) && \\"$0\\" \\"$@\\"", "sh", "-ec", "program_path=$(mktemp)\\nprintf \\"%s\\" \\"$0\\" > \\"$program_path\\"\\npython3 -u \\"$program_path\\" \\"$@\\"\\n", "def dummy_component(a, b= None):\\n    from comet_ml import Experiment\\n    import time\\n    import math\\n    import random\\n\\n    experiment = Experiment(\\n        api_key=\\"AnldYMXVqERr0n7Q3TKiBI4LI\\",\\n        project_name=\\"kubeflow_test\\",\\n        workspace=\\"jacques-comet\\",\\n    )\\n    experiment.log_other(\'kubeflow_run_id\', \'{{workflow.uid}}\')\\n    experiment.log_other(\'kubeflow_task_name\', \'{{workflow.uid}}-{{pod.name}}\')\\n    experiment.log_other(\'kubeflow_task_type\', \'task\')\\n\\n    for i in range(60):\\n        experiment.log_metric(\'accuracy\', math.log(i + random.random()))\\n        time.sleep(0.1)\\n    experiment.end()\\n\\n    return a\\n\\ndef _serialize_str(str_value: str) -> str:\\n    if not isinstance(str_value, str):\\n        raise TypeError(\'Value \\"{}\\" has type \\"{}\\" instead of str.\'.format(\\n            str(str_value), str(type(str_value))))\\n    return str_value\\n\\nimport argparse\\n_parser = argparse.ArgumentParser(prog=\'Dummy component\', description=\'\')\\n_parser.add_argument(\\"--a\\", dest=\\"a\\", type=str, required=True, default=argparse.SUPPRESS)\\n_parser.add_argument(\\"--b\\", dest=\\"b\\", type=str, required=False, default=argparse.SUPPRESS)\\n_parser.add_argument(\\"----output-paths\\", dest=\\"_output_paths\\", type=str, nargs=1)\\n_parsed_args = vars(_parser.parse_args())\\n_output_files = _parsed_args.pop(\\"_output_paths\\", [])\\n\\n_outputs = dummy_component(**_parsed_args)\\n\\n_outputs = [_outputs]\\n\\n_output_serializers = [\\n    _serialize_str,\\n\\n]\\n\\nimport os\\nfor idx, output_file in enumerate(_output_files):\\n    try:\\n        os.makedirs(os.path.dirname(output_file))\\n    except OSError:\\n        pass\\n    with open(output_file, \'w\') as f:\\n        f.write(_output_serializers[idx](_outputs[idx]))\\n", "--a", "{{$.inputs.parameters[\'a\']}}", "----output-paths", "{{$.outputs.parameters[\'Output\'].output_file}}"], "command": ["/kfp-launcher/launch", "--mlmd_server_address", "$(METADATA_GRPC_SERVICE_HOST)", "--mlmd_server_port", "$(METADATA_GRPC_SERVICE_PORT)", "--runtime_info_json", "$(KFP_V2_RUNTIME_INFO)", "--container_image", "$(KFP_V2_IMAGE)", "--task_name", "dummy-component", "--pipeline_name", "{{inputs.parameters.pipeline-name}}", "--run_id", "$(KFP_RUN_ID)", "--run_resource", "workflows.argoproj.io/$(WORKFLOW_ID)", "--namespace", "$(KFP_NAMESPACE)", "--pod_name", "$(KFP_POD_NAME)", "--pod_uid", "$(KFP_POD_UID)", "--pipeline_root", "{{inputs.parameters.pipeline-root}}", "--enable_caching", "$(ENABLE_CACHING)", "--", "a=test", "--"], "env": [{"name": "KFP_POD_NAME", "valueFrom": {"fieldRef": {"fieldPath": "metadata.name"}}}, {"name": "KFP_POD_UID", "valueFrom": {"fieldRef": {"fieldPath": "metadata.uid"}}}, {"name": "KFP_NAMESPACE", "valueFrom": {"fieldRef": {"fieldPath": "metadata.namespace"}}}, {"name": "WORKFLOW_ID", "valueFrom": {"fieldRef": {"fieldPath": "metadata.labels[\'workflows.argoproj.io/workflow\']"}}}, {"name": "KFP_RUN_ID", "valueFrom": {"fieldRef": {"fieldPath": "metadata.labels[\'pipeline/runid\']"}}}, {"name": "ENABLE_CACHING", "valueFrom": {"fieldRef": {"fieldPath": "metadata.labels[\'pipelines.kubeflow.org/enable_caching\']"}}}, {"name": "KFP_V2_IMAGE", "value": "python:3.7"}, {"name": "KFP_V2_RUNTIME_INFO", "value": "{\\"inputParameters\\": {\\"a\\": {\\"type\\": \\"STRING\\"}}, \\"inputArtifacts\\": {}, \\"outputParameters\\": {\\"Output\\": {\\"type\\": \\"STRING\\", \\"path\\": \\"/tmp/outputs/Output/data\\"}}, \\"outputArtifacts\\": {}}"}], "envFrom": [{"configMapRef": {"name": "metadata-grpc-configmap", "optional": true}}], "image": "python:3.7", "volumeMounts": [{"mountPath": "/kfp-launcher", "name": "kfp-launcher"}]}, "inputs": {"parameters": [{"name": "pipeline-name"}, {"name": "pipeline-root"}]}, "outputs": {"parameters": [{"name": "dummy-component-Output", "valueFrom": {"path": "/tmp/outputs/Output/data"}}], "artifacts": [{"name": "dummy-component-Output", "path": "/tmp/outputs/Output/data"}]}, "metadata": {"annotations": {"pipelines.kubeflow.org/v2_component": "true", "pipelines.kubeflow.org/component_ref": "{}", "pipelines.kubeflow.org/arguments.parameters": "{\\"a\\": \\"test\\"}"}, "labels": {"pipelines.kubeflow.org/kfp_sdk_version": "1.8.9", "pipelines.kubeflow.org/pipeline-sdk-type": "kfp", "pipelines.kubeflow.org/v2_component": "true", "pipelines.kubeflow.org/enable_caching": "false"}}, "initContainers": [{"command": ["launcher", "--copy", "/kfp-launcher/launch"], "image": "gcr.io/ml-pipeline/kfp-launcher:1.8.7", "name": "kfp-launcher", "mirrorVolumeMounts": true}], "volumes": [{"name": "kfp-launcher"}]}, {"name": "dummy-component-2", "container": {"args": ["sh", "-c", "(PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location \'comet_ml\' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location \'comet_ml\' --user) && \\"$0\\" \\"$@\\"", "sh", "-ec", "program_path=$(mktemp)\\nprintf \\"%s\\" \\"$0\\" > \\"$program_path\\"\\npython3 -u \\"$program_path\\" \\"$@\\"\\n", "def dummy_component(a, b= None):\\n    from comet_ml import Experiment\\n    import time\\n    import math\\n    import random\\n\\n    experiment = Experiment(\\n        api_key=\\"AnldYMXVqERr0n7Q3TKiBI4LI\\",\\n        project_name=\\"kubeflow_test\\",\\n        workspace=\\"jacques-comet\\",\\n    )\\n    experiment.log_other(\'kubeflow_run_id\', \'{{workflow.uid}}\')\\n    experiment.log_other(\'kubeflow_task_name\', \'{{workflow.uid}}-{{pod.name}}\')\\n    experiment.log_other(\'kubeflow_task_type\', \'task\')\\n\\n    for i in range(60):\\n        experiment.log_metric(\'accuracy\', math.log(i + random.random()))\\n        time.sleep(0.1)\\n    experiment.end()\\n\\n    return a\\n\\ndef _serialize_str(str_value: str) -> str:\\n    if not isinstance(str_value, str):\\n        raise TypeError(\'Value \\"{}\\" has type \\"{}\\" instead of str.\'.format(\\n            str(str_value), str(type(str_value))))\\n    return str_value\\n\\nimport argparse\\n_parser = argparse.ArgumentParser(prog=\'Dummy component\', description=\'\')\\n_parser.add_argument(\\"--a\\", dest=\\"a\\", type=str, required=True, default=argparse.SUPPRESS)\\n_parser.add_argument(\\"--b\\", dest=\\"b\\", type=str, required=False, default=argparse.SUPPRESS)\\n_parser.add_argument(\\"----output-paths\\", dest=\\"_output_paths\\", type=str, nargs=1)\\n_parsed_args = vars(_parser.parse_args())\\n_output_files = _parsed_args.pop(\\"_output_paths\\", [])\\n\\n_outputs = dummy_component(**_parsed_args)\\n\\n_outputs = [_outputs]\\n\\n_output_serializers = [\\n    _serialize_str,\\n\\n]\\n\\nimport os\\nfor idx, output_file in enumerate(_output_files):\\n    try:\\n        os.makedirs(os.path.dirname(output_file))\\n    except OSError:\\n        pass\\n    with open(output_file, \'w\') as f:\\n        f.write(_output_serializers[idx](_outputs[idx]))\\n", "--a", "{{$.inputs.parameters[\'a\']}}", "----output-paths", "{{$.outputs.parameters[\'Output\'].output_file}}"], "command": ["/kfp-launcher/launch", "--mlmd_server_address", "$(METADATA_GRPC_SERVICE_HOST)", "--mlmd_server_port", "$(METADATA_GRPC_SERVICE_PORT)", "--runtime_info_json", "$(KFP_V2_RUNTIME_INFO)", "--container_image", "$(KFP_V2_IMAGE)", "--task_name", "dummy-component-2", "--pipeline_name", "{{inputs.parameters.pipeline-name}}", "--run_id", "$(KFP_RUN_ID)", "--run_resource", "workflows.argoproj.io/$(WORKFLOW_ID)", "--namespace", "$(KFP_NAMESPACE)", "--pod_name", "$(KFP_POD_NAME)", "--pod_uid", "$(KFP_POD_UID)", "--pipeline_root", "{{inputs.parameters.pipeline-root}}", "--enable_caching", "$(ENABLE_CACHING)", "--", "a={{inputs.parameters.dummy-component-Output}}", "--"], "env": [{"name": "KFP_POD_NAME", "valueFrom": {"fieldRef": {"fieldPath": "metadata.name"}}}, {"name": "KFP_POD_UID", "valueFrom": {"fieldRef": {"fieldPath": "metadata.uid"}}}, {"name": "KFP_NAMESPACE", "valueFrom": {"fieldRef": {"fieldPath": "metadata.namespace"}}}, {"name": "WORKFLOW_ID", "valueFrom": {"fieldRef": {"fieldPath": "metadata.labels[\'workflows.argoproj.io/workflow\']"}}}, {"name": "KFP_RUN_ID", "valueFrom": {"fieldRef": {"fieldPath": "metadata.labels[\'pipeline/runid\']"}}}, {"name": "ENABLE_CACHING", "valueFrom": {"fieldRef": {"fieldPath": "metadata.labels[\'pipelines.kubeflow.org/enable_caching\']"}}}, {"name": "KFP_V2_IMAGE", "value": "python:3.7"}, {"name": "KFP_V2_RUNTIME_INFO", "value": "{\\"inputParameters\\": {\\"a\\": {\\"type\\": \\"STRING\\"}}, \\"inputArtifacts\\": {}, \\"outputParameters\\": {\\"Output\\": {\\"type\\": \\"STRING\\", \\"path\\": \\"/tmp/outputs/Output/data\\"}}, \\"outputArtifacts\\": {}}"}], "envFrom": [{"configMapRef": {"name": "metadata-grpc-configmap", "optional": true}}], "image": "python:3.7", "volumeMounts": [{"mountPath": "/kfp-launcher", "name": "kfp-launcher"}]}, "inputs": {"parameters": [{"name": "dummy-component-Output"}, {"name": "pipeline-name"}, {"name": "pipeline-root"}]}, "outputs": {"parameters": [{"name": "dummy-component-2-Output", "valueFrom": {"path": "/tmp/outputs/Output/data"}}], "artifacts": [{"name": "dummy-component-2-Output", "path": "/tmp/outputs/Output/data"}]}, "metadata": {"annotations": {"pipelines.kubeflow.org/v2_component": "true", "pipelines.kubeflow.org/component_ref": "{}", "pipelines.kubeflow.org/arguments.parameters": "{\\"a\\": \\"{{inputs.parameters.dummy-component-Output}}\\"}"}, "labels": {"pipelines.kubeflow.org/kfp_sdk_version": "1.8.9", "pipelines.kubeflow.org/pipeline-sdk-type": "kfp", "pipelines.kubeflow.org/v2_component": "true", "pipelines.kubeflow.org/enable_caching": "false"}}, "initContainers": [{"command": ["launcher", "--copy", "/kfp-launcher/launch"], "image": "gcr.io/ml-pipeline/kfp-launcher:1.8.7", "name": "kfp-launcher", "mirrorVolumeMounts": true}], "volumes": [{"name": "kfp-launcher"}]}, {"name": "dummy-component-3", "container": {"args": ["sh", "-c", "(PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location \'comet_ml\' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location \'comet_ml\' --user) && \\"$0\\" \\"$@\\"", "sh", "-ec", "program_path=$(mktemp)\\nprintf \\"%s\\" \\"$0\\" > \\"$program_path\\"\\npython3 -u \\"$program_path\\" \\"$@\\"\\n", "def dummy_component(a, b= None):\\n    from comet_ml import Experiment\\n    import time\\n    import math\\n    import random\\n\\n    experiment = Experiment(\\n        api_key=\\"AnldYMXVqERr0n7Q3TKiBI4LI\\",\\n        project_name=\\"kubeflow_test\\",\\n        workspace=\\"jacques-comet\\",\\n    )\\n    experiment.log_other(\'kubeflow_run_id\', \'{{workflow.uid}}\')\\n    experiment.log_other(\'kubeflow_task_name\', \'{{workflow.uid}}-{{pod.name}}\')\\n    experiment.log_other(\'kubeflow_task_type\', \'task\')\\n\\n    for i in range(60):\\n        experiment.log_metric(\'accuracy\', math.log(i + random.random()))\\n        time.sleep(0.1)\\n    experiment.end()\\n\\n    return a\\n\\ndef _serialize_str(str_value: str) -> str:\\n    if not isinstance(str_value, str):\\n        raise TypeError(\'Value \\"{}\\" has type \\"{}\\" instead of str.\'.format(\\n            str(str_value), str(type(str_value))))\\n    return str_value\\n\\nimport argparse\\n_parser = argparse.ArgumentParser(prog=\'Dummy component\', description=\'\')\\n_parser.add_argument(\\"--a\\", dest=\\"a\\", type=str, required=True, default=argparse.SUPPRESS)\\n_parser.add_argument(\\"--b\\", dest=\\"b\\", type=str, required=False, default=argparse.SUPPRESS)\\n_parser.add_argument(\\"----output-paths\\", dest=\\"_output_paths\\", type=str, nargs=1)\\n_parsed_args = vars(_parser.parse_args())\\n_output_files = _parsed_args.pop(\\"_output_paths\\", [])\\n\\n_outputs = dummy_component(**_parsed_args)\\n\\n_outputs = [_outputs]\\n\\n_output_serializers = [\\n    _serialize_str,\\n\\n]\\n\\nimport os\\nfor idx, output_file in enumerate(_output_files):\\n    try:\\n        os.makedirs(os.path.dirname(output_file))\\n    except OSError:\\n        pass\\n    with open(output_file, \'w\') as f:\\n        f.write(_output_serializers[idx](_outputs[idx]))\\n", "--a", "{{$.inputs.parameters[\'a\']}}", "----output-paths", "{{$.outputs.parameters[\'Output\'].output_file}}"], "command": ["/kfp-launcher/launch", "--mlmd_server_address", "$(METADATA_GRPC_SERVICE_HOST)", "--mlmd_server_port", "$(METADATA_GRPC_SERVICE_PORT)", "--runtime_info_json", "$(KFP_V2_RUNTIME_INFO)", "--container_image", "$(KFP_V2_IMAGE)", "--task_name", "dummy-component-3", "--pipeline_name", "{{inputs.parameters.pipeline-name}}", "--run_id", "$(KFP_RUN_ID)", "--run_resource", "workflows.argoproj.io/$(WORKFLOW_ID)", "--namespace", "$(KFP_NAMESPACE)", "--pod_name", "$(KFP_POD_NAME)", "--pod_uid", "$(KFP_POD_UID)", "--pipeline_root", "{{inputs.parameters.pipeline-root}}", "--enable_caching", "$(ENABLE_CACHING)", "--", "a={{inputs.parameters.dummy-component-Output}}", "--"], "env": [{"name": "KFP_POD_NAME", "valueFrom": {"fieldRef": {"fieldPath": "metadata.name"}}}, {"name": "KFP_POD_UID", "valueFrom": {"fieldRef": {"fieldPath": "metadata.uid"}}}, {"name": "KFP_NAMESPACE", "valueFrom": {"fieldRef": {"fieldPath": "metadata.namespace"}}}, {"name": "WORKFLOW_ID", "valueFrom": {"fieldRef": {"fieldPath": "metadata.labels[\'workflows.argoproj.io/workflow\']"}}}, {"name": "KFP_RUN_ID", "valueFrom": {"fieldRef": {"fieldPath": "metadata.labels[\'pipeline/runid\']"}}}, {"name": "ENABLE_CACHING", "valueFrom": {"fieldRef": {"fieldPath": "metadata.labels[\'pipelines.kubeflow.org/enable_caching\']"}}}, {"name": "KFP_V2_IMAGE", "value": "python:3.7"}, {"name": "KFP_V2_RUNTIME_INFO", "value": "{\\"inputParameters\\": {\\"a\\": {\\"type\\": \\"STRING\\"}}, \\"inputArtifacts\\": {}, \\"outputParameters\\": {\\"Output\\": {\\"type\\": \\"STRING\\", \\"path\\": \\"/tmp/outputs/Output/data\\"}}, \\"outputArtifacts\\": {}}"}], "envFrom": [{"configMapRef": {"name": "metadata-grpc-configmap", "optional": true}}], "image": "python:3.7", "volumeMounts": [{"mountPath": "/kfp-launcher", "name": "kfp-launcher"}]}, "inputs": {"parameters": [{"name": "dummy-component-Output"}, {"name": "pipeline-name"}, {"name": "pipeline-root"}]}, "outputs": {"parameters": [{"name": "dummy-component-3-Output", "valueFrom": {"path": "/tmp/outputs/Output/data"}}], "artifacts": [{"name": "dummy-component-3-Output", "path": "/tmp/outputs/Output/data"}]}, "metadata": {"annotations": {"pipelines.kubeflow.org/v2_component": "true", "pipelines.kubeflow.org/component_ref": "{}", "pipelines.kubeflow.org/arguments.parameters": "{\\"a\\": \\"{{inputs.parameters.dummy-component-Output}}\\"}"}, "labels": {"pipelines.kubeflow.org/kfp_sdk_version": "1.8.9", "pipelines.kubeflow.org/pipeline-sdk-type": "kfp", "pipelines.kubeflow.org/v2_component": "true", "pipelines.kubeflow.org/enable_caching": "false"}}, "initContainers": [{"command": ["launcher", "--copy", "/kfp-launcher/launch"], "image": "gcr.io/ml-pipeline/kfp-launcher:1.8.7", "name": "kfp-launcher", "mirrorVolumeMounts": true}], "volumes": [{"name": "kfp-launcher"}]}, {"name": "dummy-component-4", "container": {"args": ["sh", "-c", "(PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location \'comet_ml\' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location \'comet_ml\' --user) && \\"$0\\" \\"$@\\"", "sh", "-ec", "program_path=$(mktemp)\\nprintf \\"%s\\" \\"$0\\" > \\"$program_path\\"\\npython3 -u \\"$program_path\\" \\"$@\\"\\n", "def dummy_component(a, b= None):\\n    from comet_ml import Experiment\\n    import time\\n    import math\\n    import random\\n\\n    experiment = Experiment(\\n        api_key=\\"AnldYMXVqERr0n7Q3TKiBI4LI\\",\\n        project_name=\\"kubeflow_test\\",\\n        workspace=\\"jacques-comet\\",\\n    )\\n    experiment.log_other(\'kubeflow_run_id\', \'{{workflow.uid}}\')\\n    experiment.log_other(\'kubeflow_task_name\', \'{{workflow.uid}}-{{pod.name}}\')\\n    experiment.log_other(\'kubeflow_task_type\', \'task\')\\n\\n    for i in range(60):\\n        experiment.log_metric(\'accuracy\', math.log(i + random.random()))\\n        time.sleep(0.1)\\n    experiment.end()\\n\\n    return a\\n\\ndef _serialize_str(str_value: str) -> str:\\n    if not isinstance(str_value, str):\\n        raise TypeError(\'Value \\"{}\\" has type \\"{}\\" instead of str.\'.format(\\n            str(str_value), str(type(str_value))))\\n    return str_value\\n\\nimport argparse\\n_parser = argparse.ArgumentParser(prog=\'Dummy component\', description=\'\')\\n_parser.add_argument(\\"--a\\", dest=\\"a\\", type=str, required=True, default=argparse.SUPPRESS)\\n_parser.add_argument(\\"--b\\", dest=\\"b\\", type=str, required=False, default=argparse.SUPPRESS)\\n_parser.add_argument(\\"----output-paths\\", dest=\\"_output_paths\\", type=str, nargs=1)\\n_parsed_args = vars(_parser.parse_args())\\n_output_files = _parsed_args.pop(\\"_output_paths\\", [])\\n\\n_outputs = dummy_component(**_parsed_args)\\n\\n_outputs = [_outputs]\\n\\n_output_serializers = [\\n    _serialize_str,\\n\\n]\\n\\nimport os\\nfor idx, output_file in enumerate(_output_files):\\n    try:\\n        os.makedirs(os.path.dirname(output_file))\\n    except OSError:\\n        pass\\n    with open(output_file, \'w\') as f:\\n        f.write(_output_serializers[idx](_outputs[idx]))\\n", "--a", "{{$.inputs.parameters[\'a\']}}", "--b", "{{$.inputs.parameters[\'b\']}}", "----output-paths", "{{$.outputs.parameters[\'Output\'].output_file}}"], "command": ["/kfp-launcher/launch", "--mlmd_server_address", "$(METADATA_GRPC_SERVICE_HOST)", "--mlmd_server_port", "$(METADATA_GRPC_SERVICE_PORT)", "--runtime_info_json", "$(KFP_V2_RUNTIME_INFO)", "--container_image", "$(KFP_V2_IMAGE)", "--task_name", "dummy-component-4", "--pipeline_name", "{{inputs.parameters.pipeline-name}}", "--run_id", "$(KFP_RUN_ID)", "--run_resource", "workflows.argoproj.io/$(WORKFLOW_ID)", "--namespace", "$(KFP_NAMESPACE)", "--pod_name", "$(KFP_POD_NAME)", "--pod_uid", "$(KFP_POD_UID)", "--pipeline_root", "{{inputs.parameters.pipeline-root}}", "--enable_caching", "$(ENABLE_CACHING)", "--", "a={{inputs.parameters.dummy-component-2-Output}}", "b={{inputs.parameters.dummy-component-3-Output}}", "--"], "env": [{"name": "KFP_POD_NAME", "valueFrom": {"fieldRef": {"fieldPath": "metadata.name"}}}, {"name": "KFP_POD_UID", "valueFrom": {"fieldRef": {"fieldPath": "metadata.uid"}}}, {"name": "KFP_NAMESPACE", "valueFrom": {"fieldRef": {"fieldPath": "metadata.namespace"}}}, {"name": "WORKFLOW_ID", "valueFrom": {"fieldRef": {"fieldPath": "metadata.labels[\'workflows.argoproj.io/workflow\']"}}}, {"name": "KFP_RUN_ID", "valueFrom": {"fieldRef": {"fieldPath": "metadata.labels[\'pipeline/runid\']"}}}, {"name": "ENABLE_CACHING", "valueFrom": {"fieldRef": {"fieldPath": "metadata.labels[\'pipelines.kubeflow.org/enable_caching\']"}}}, {"name": "KFP_V2_IMAGE", "value": "python:3.7"}, {"name": "KFP_V2_RUNTIME_INFO", "value": "{\\"inputParameters\\": {\\"a\\": {\\"type\\": \\"STRING\\"}, \\"b\\": {\\"type\\": \\"STRING\\"}}, \\"inputArtifacts\\": {}, \\"outputParameters\\": {\\"Output\\": {\\"type\\": \\"STRING\\", \\"path\\": \\"/tmp/outputs/Output/data\\"}}, \\"outputArtifacts\\": {}}"}], "envFrom": [{"configMapRef": {"name": "metadata-grpc-configmap", "optional": true}}], "image": "python:3.7", "volumeMounts": [{"mountPath": "/kfp-launcher", "name": "kfp-launcher"}]}, "inputs": {"parameters": [{"name": "dummy-component-2-Output"}, {"name": "dummy-component-3-Output"}, {"name": "pipeline-name"}, {"name": "pipeline-root"}]}, "outputs": {"artifacts": [{"name": "dummy-component-4-Output", "path": "/tmp/outputs/Output/data"}]}, "metadata": {"annotations": {"pipelines.kubeflow.org/v2_component": "true", "pipelines.kubeflow.org/component_ref": "{}", "pipelines.kubeflow.org/arguments.parameters": "{\\"a\\": \\"{{inputs.parameters.dummy-component-2-Output}}\\", \\"b\\": \\"{{inputs.parameters.dummy-component-3-Output}}\\"}"}, "labels": {"pipelines.kubeflow.org/kfp_sdk_version": "1.8.9", "pipelines.kubeflow.org/pipeline-sdk-type": "kfp", "pipelines.kubeflow.org/v2_component": "true", "pipelines.kubeflow.org/enable_caching": "false"}}, "initContainers": [{"command": ["launcher", "--copy", "/kfp-launcher/launch"], "image": "gcr.io/ml-pipeline/kfp-launcher:1.8.7", "name": "kfp-launcher", "mirrorVolumeMounts": true}], "volumes": [{"name": "kfp-launcher"}]}], "arguments": {"parameters": [{"name": "pipeline-root", "value": ""}, {"name": "pipeline-name", "value": "pipeline/Basic Comet Pipeline"}]}, "serviceAccountName": "pipeline-runner"}}',
      pipeline_manifest: null,
      parameters: null
    },
    resource_references: [
      {
        key: {
          type: "EXPERIMENT",
          id: "d23deefa-eaf4-4506-8d9d-7d563296565d"
        },
        name: "Default",
        relationship: "OWNER"
      }
    ],
    service_account: "pipeline-runner",
    created_at: "2022-01-12 20:46:18+00:00",
    scheduled_at: "1970-01-01 00:00:00+00:00",
    finished_at: "1970-01-01 00:00:00+00:00",
    status: "Running",
    error: null,
    metrics: null
  },
  pipeline_runtime: {
    pipeline_manifest: null,
    workflow_manifest:
      '{"metadata":{"name":"basic-comet-pipeline-5vwc2","generateName":"basic-comet-pipeline-","namespace":"kubeflow","uid":"8f0dc78e-f70e-46cd-a804-9ff2d4aa29ea","resourceVersion":"395802","generation":6,"creationTimestamp":"2022-01-12T20:46:18Z","labels":{"pipeline/runid":"3d544f4e-45de-4527-abcc-98fc9a49b52d","pipelines.kubeflow.org/kfp_sdk_version":"1.8.9","pipelines.kubeflow.org/v2_pipeline":"true","workflows.argoproj.io/phase":"Running"},"annotations":{"pipelines.kubeflow.org/kfp_sdk_version":"1.8.9","pipelines.kubeflow.org/pipeline_compilation_time":"2022-01-12T20:46:17.437708","pipelines.kubeflow.org/pipeline_spec":"{\\"inputs\\": [{\\"default\\": \\"\\", \\"name\\": \\"pipeline-root\\"}, {\\"default\\": \\"pipeline/Basic Comet Pipeline\\", \\"name\\": \\"pipeline-name\\"}], \\"name\\": \\"Basic Comet Pipeline\\"}","pipelines.kubeflow.org/run_name":"add_pipeline 2022-01-12 20-46-17","pipelines.kubeflow.org/v2_pipeline":"true"},"managedFields":[{"manager":"apiserver","operation":"Update","apiVersion":"argoproj.io/v1alpha1","time":"2022-01-12T20:46:18Z","fieldsType":"FieldsV1","fieldsV1":{"f:metadata":{"f:annotations":{".":{},"f:pipelines.kubeflow.org/kfp_sdk_version":{},"f:pipelines.kubeflow.org/pipeline_compilation_time":{},"f:pipelines.kubeflow.org/pipeline_spec":{},"f:pipelines.kubeflow.org/run_name":{},"f:pipelines.kubeflow.org/v2_pipeline":{}},"f:generateName":{},"f:labels":{".":{},"f:pipeline/runid":{},"f:pipelines.kubeflow.org/kfp_sdk_version":{},"f:pipelines.kubeflow.org/v2_pipeline":{}}},"f:spec":{}}},{"manager":"workflow-controller","operation":"Update","apiVersion":"argoproj.io/v1alpha1","time":"2022-01-12T20:46:18Z","fieldsType":"FieldsV1","fieldsV1":{"f:metadata":{"f:labels":{"f:workflows.argoproj.io/phase":{}}},"f:status":{}}}]},"spec":{"templates":[{"name":"basic-comet-pipeline","inputs":{"parameters":[{"name":"pipeline-name"},{"name":"pipeline-root"}]},"outputs":{},"metadata":{"annotations":{"sidecar.istio.io/inject":"false"},"labels":{"pipelines.kubeflow.org/cache_enabled":"true"}},"dag":{"tasks":[{"name":"comet-logger","template":"comet-logger","arguments":{"parameters":[{"name":"pipeline-name","value":"{{inputs.parameters.pipeline-name}}"},{"name":"pipeline-root","value":"{{inputs.parameters.pipeline-root}}"}]}},{"name":"dummy-component","template":"dummy-component","arguments":{"parameters":[{"name":"pipeline-name","value":"{{inputs.parameters.pipeline-name}}"},{"name":"pipeline-root","value":"{{inputs.parameters.pipeline-root}}"}]}},{"name":"dummy-component-2","template":"dummy-component-2","arguments":{"parameters":[{"name":"dummy-component-Output","value":"{{tasks.dummy-component.outputs.parameters.dummy-component-Output}}"},{"name":"pipeline-name","value":"{{inputs.parameters.pipeline-name}}"},{"name":"pipeline-root","value":"{{inputs.parameters.pipeline-root}}"}]},"dependencies":["dummy-component"]},{"name":"dummy-component-3","template":"dummy-component-3","arguments":{"parameters":[{"name":"dummy-component-Output","value":"{{tasks.dummy-component.outputs.parameters.dummy-component-Output}}"},{"name":"pipeline-name","value":"{{inputs.parameters.pipeline-name}}"},{"name":"pipeline-root","value":"{{inputs.parameters.pipeline-root}}"}]},"dependencies":["dummy-component"]},{"name":"dummy-component-4","template":"dummy-component-4","arguments":{"parameters":[{"name":"dummy-component-2-Output","value":"{{tasks.dummy-component-2.outputs.parameters.dummy-component-2-Output}}"},{"name":"dummy-component-3-Output","value":"{{tasks.dummy-component-3.outputs.parameters.dummy-component-3-Output}}"},{"name":"pipeline-name","value":"{{inputs.parameters.pipeline-name}}"},{"name":"pipeline-root","value":"{{inputs.parameters.pipeline-root}}"}]},"dependencies":["dummy-component-2","dummy-component-3"]}]}},{"name":"comet-logger","inputs":{"parameters":[{"name":"pipeline-name"},{"name":"pipeline-root"}]},"outputs":{},"metadata":{"annotations":{"pipelines.kubeflow.org/arguments.parameters":"{\\"workflow_uid\\": \\"3d544f4e-45de-4527-abcc-98fc9a49b52d\\"}","pipelines.kubeflow.org/component_ref":"{}","pipelines.kubeflow.org/v2_component":"true","sidecar.istio.io/inject":"false"},"labels":{"pipelines.kubeflow.org/cache_enabled":"true","pipelines.kubeflow.org/enable_caching":"false","pipelines.kubeflow.org/kfp_sdk_version":"1.8.9","pipelines.kubeflow.org/pipeline-sdk-type":"kfp","pipelines.kubeflow.org/v2_component":"true"}},"container":{"name":"","image":"python:3.7","command":["/kfp-launcher/launch","--mlmd_server_address","$(METADATA_GRPC_SERVICE_HOST)","--mlmd_server_port","$(METADATA_GRPC_SERVICE_PORT)","--runtime_info_json","$(KFP_V2_RUNTIME_INFO)","--container_image","$(KFP_V2_IMAGE)","--task_name","comet-logger","--pipeline_name","{{inputs.parameters.pipeline-name}}","--run_id","$(KFP_RUN_ID)","--run_resource","workflows.argoproj.io/$(WORKFLOW_ID)","--namespace","$(KFP_NAMESPACE)","--pod_name","$(KFP_POD_NAME)","--pod_uid","$(KFP_POD_UID)","--pipeline_root","{{inputs.parameters.pipeline-root}}","--enable_caching","$(ENABLE_CACHING)","--","workflow_uid=3d544f4e-45de-4527-abcc-98fc9a49b52d","--"],"args":["sh","-c","(PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location \'comet_ml\' \'kfp\' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location \'comet_ml\' \'kfp\' --user) \\u0026\\u0026 \\"$0\\" \\"$@\\"","sh","-ec","program_path=$(mktemp)\\nprintf \\"%s\\" \\"$0\\" \\u003e \\"$program_path\\"\\npython3 -u \\"$program_path\\" \\"$@\\"\\n","def comet_logger(workflow_uid):\\n    import time\\n    import json\\n    import kfp\\n    from comet_ml import Experiment\\n\\n    # Create an experiment with your api key\\n    experiment = Experiment(\\n        api_key=\\"AnldYMXVqERr0n7Q3TKiBI4LI\\",\\n        project_name=\\"kubeflow_test\\",\\n        workspace=\\"jacques-comet\\",\\n    )\\n    experiment.set_name(f\'pipeline-tracking-{workflow_uid}\')\\n    experiment.log_other(\'kubeflow_run_id\', workflow_uid)\\n    experiment.log_other(\'kubeflow_task_type\', \'pipeline\')\\n    client = kfp.Client()\\n\\n    # Need to add a while condition based on the state of the pipeline so that it auto-terminates\\n    # Check there are\\n    pipeline_running = True\\n    iterator_nb = 0\\n    step = 0\\n\\n    while pipeline_running:\\n        run_data = client.get_run(workflow_uid)\\n        pipeline_state = json.loads(run_data.pipeline_runtime.workflow_manifest)[\'status\']\\n        experiment.log_asset_data(json.dumps(pipeline_state), step=step)\\n        experiment.log_asset_data(json.dumps(run_data.to_dict(), default=str), step= 1000 + step)\\n\\n        # Simple check that looks at the number of running tasks and if there is only one running for more\\n        # than 10 seconds stops monitoring the pipeline\\n        nb_tasks_running = sum([x[\'phase\'].lower() not in [\'succeeded\', \'failed\', \'skipped\', \'error\'] for x in pipeline_state[\\"nodes\\"].values() if x[\'type\'] != \'DAG\'])\\n\\n        if nb_tasks_running \\u003e 1:\\n            iterator_nb = 0\\n        else:\\n            iterator_nb += 1\\n\\n        if iterator_nb \\u003e 10:\\n            pipeline_running = False\\n\\n        step += 1\\n\\n        time.sleep(1)\\n\\n    print(f\\"Pipeline has finished running - number tasks running = {nb_tasks_running}, pipeline_running = {pipeline_running}\\")\\n    return None\\n\\nimport argparse\\n_parser = argparse.ArgumentParser(prog=\'Comet logger\', description=\'\')\\n_parser.add_argument(\\"--workflow-uid\\", dest=\\"workflow_uid\\", type=str, required=True, default=argparse.SUPPRESS)\\n_parsed_args = vars(_parser.parse_args())\\n\\n_outputs = comet_logger(**_parsed_args)\\n","--workflow-uid","{{$.inputs.parameters[\'workflow_uid\']}}"],"envFrom":[{"configMapRef":{"name":"metadata-grpc-configmap","optional":true}}],"env":[{"name":"KFP_POD_NAME","valueFrom":{"fieldRef":{"fieldPath":"metadata.name"}}},{"name":"KFP_POD_UID","valueFrom":{"fieldRef":{"fieldPath":"metadata.uid"}}},{"name":"KFP_NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}},{"name":"WORKFLOW_ID","valueFrom":{"fieldRef":{"fieldPath":"metadata.labels[\'workflows.argoproj.io/workflow\']"}}},{"name":"KFP_RUN_ID","valueFrom":{"fieldRef":{"fieldPath":"metadata.labels[\'pipeline/runid\']"}}},{"name":"ENABLE_CACHING","valueFrom":{"fieldRef":{"fieldPath":"metadata.labels[\'pipelines.kubeflow.org/enable_caching\']"}}},{"name":"KFP_V2_IMAGE","value":"python:3.7"},{"name":"KFP_V2_RUNTIME_INFO","value":"{\\"inputParameters\\": {\\"workflow_uid\\": {\\"type\\": \\"STRING\\"}}, \\"inputArtifacts\\": {}, \\"outputParameters\\": {}, \\"outputArtifacts\\": {}}"}],"resources":{},"volumeMounts":[{"name":"kfp-launcher","mountPath":"/kfp-launcher"}]},"volumes":[{"name":"kfp-launcher"}],"initContainers":[{"name":"kfp-launcher","image":"gcr.io/ml-pipeline/kfp-launcher:1.8.7","command":["launcher","--copy","/kfp-launcher/launch"],"resources":{},"mirrorVolumeMounts":true}]},{"name":"dummy-component","inputs":{"parameters":[{"name":"pipeline-name"},{"name":"pipeline-root"}]},"outputs":{"parameters":[{"name":"dummy-component-Output","valueFrom":{"path":"/tmp/outputs/Output/data"}}],"artifacts":[{"name":"dummy-component-Output","path":"/tmp/outputs/Output/data"}]},"metadata":{"annotations":{"pipelines.kubeflow.org/arguments.parameters":"{\\"a\\": \\"test\\"}","pipelines.kubeflow.org/component_ref":"{}","pipelines.kubeflow.org/v2_component":"true","sidecar.istio.io/inject":"false"},"labels":{"pipelines.kubeflow.org/cache_enabled":"true","pipelines.kubeflow.org/enable_caching":"false","pipelines.kubeflow.org/kfp_sdk_version":"1.8.9","pipelines.kubeflow.org/pipeline-sdk-type":"kfp","pipelines.kubeflow.org/v2_component":"true"}},"container":{"name":"","image":"python:3.7","command":["/kfp-launcher/launch","--mlmd_server_address","$(METADATA_GRPC_SERVICE_HOST)","--mlmd_server_port","$(METADATA_GRPC_SERVICE_PORT)","--runtime_info_json","$(KFP_V2_RUNTIME_INFO)","--container_image","$(KFP_V2_IMAGE)","--task_name","dummy-component","--pipeline_name","{{inputs.parameters.pipeline-name}}","--run_id","$(KFP_RUN_ID)","--run_resource","workflows.argoproj.io/$(WORKFLOW_ID)","--namespace","$(KFP_NAMESPACE)","--pod_name","$(KFP_POD_NAME)","--pod_uid","$(KFP_POD_UID)","--pipeline_root","{{inputs.parameters.pipeline-root}}","--enable_caching","$(ENABLE_CACHING)","--","a=test","--"],"args":["sh","-c","(PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location \'comet_ml\' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location \'comet_ml\' --user) \\u0026\\u0026 \\"$0\\" \\"$@\\"","sh","-ec","program_path=$(mktemp)\\nprintf \\"%s\\" \\"$0\\" \\u003e \\"$program_path\\"\\npython3 -u \\"$program_path\\" \\"$@\\"\\n","def dummy_component(a, b= None):\\n    from comet_ml import Experiment\\n    import time\\n    import math\\n    import random\\n\\n    experiment = Experiment(\\n        api_key=\\"AnldYMXVqERr0n7Q3TKiBI4LI\\",\\n        project_name=\\"kubeflow_test\\",\\n        workspace=\\"jacques-comet\\",\\n    )\\n    experiment.log_other(\'kubeflow_run_id\', \'3d544f4e-45de-4527-abcc-98fc9a49b52d\')\\n    experiment.log_other(\'kubeflow_task_name\', \'3d544f4e-45de-4527-abcc-98fc9a49b52d-{{pod.name}}\')\\n    experiment.log_other(\'kubeflow_task_type\', \'task\')\\n\\n    for i in range(60):\\n        experiment.log_metric(\'accuracy\', math.log(i + random.random()))\\n        time.sleep(0.1)\\n    experiment.end()\\n\\n    return a\\n\\ndef _serialize_str(str_value: str) -\\u003e str:\\n    if not isinstance(str_value, str):\\n        raise TypeError(\'Value \\"{}\\" has type \\"{}\\" instead of str.\'.format(\\n            str(str_value), str(type(str_value))))\\n    return str_value\\n\\nimport argparse\\n_parser = argparse.ArgumentParser(prog=\'Dummy component\', description=\'\')\\n_parser.add_argument(\\"--a\\", dest=\\"a\\", type=str, required=True, default=argparse.SUPPRESS)\\n_parser.add_argument(\\"--b\\", dest=\\"b\\", type=str, required=False, default=argparse.SUPPRESS)\\n_parser.add_argument(\\"----output-paths\\", dest=\\"_output_paths\\", type=str, nargs=1)\\n_parsed_args = vars(_parser.parse_args())\\n_output_files = _parsed_args.pop(\\"_output_paths\\", [])\\n\\n_outputs = dummy_component(**_parsed_args)\\n\\n_outputs = [_outputs]\\n\\n_output_serializers = [\\n    _serialize_str,\\n\\n]\\n\\nimport os\\nfor idx, output_file in enumerate(_output_files):\\n    try:\\n        os.makedirs(os.path.dirname(output_file))\\n    except OSError:\\n        pass\\n    with open(output_file, \'w\') as f:\\n        f.write(_output_serializers[idx](_outputs[idx]))\\n","--a","{{$.inputs.parameters[\'a\']}}","----output-paths","{{$.outputs.parameters[\'Output\'].output_file}}"],"envFrom":[{"configMapRef":{"name":"metadata-grpc-configmap","optional":true}}],"env":[{"name":"KFP_POD_NAME","valueFrom":{"fieldRef":{"fieldPath":"metadata.name"}}},{"name":"KFP_POD_UID","valueFrom":{"fieldRef":{"fieldPath":"metadata.uid"}}},{"name":"KFP_NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}},{"name":"WORKFLOW_ID","valueFrom":{"fieldRef":{"fieldPath":"metadata.labels[\'workflows.argoproj.io/workflow\']"}}},{"name":"KFP_RUN_ID","valueFrom":{"fieldRef":{"fieldPath":"metadata.labels[\'pipeline/runid\']"}}},{"name":"ENABLE_CACHING","valueFrom":{"fieldRef":{"fieldPath":"metadata.labels[\'pipelines.kubeflow.org/enable_caching\']"}}},{"name":"KFP_V2_IMAGE","value":"python:3.7"},{"name":"KFP_V2_RUNTIME_INFO","value":"{\\"inputParameters\\": {\\"a\\": {\\"type\\": \\"STRING\\"}}, \\"inputArtifacts\\": {}, \\"outputParameters\\": {\\"Output\\": {\\"type\\": \\"STRING\\", \\"path\\": \\"/tmp/outputs/Output/data\\"}}, \\"outputArtifacts\\": {}}"}],"resources":{},"volumeMounts":[{"name":"kfp-launcher","mountPath":"/kfp-launcher"}]},"volumes":[{"name":"kfp-launcher"}],"initContainers":[{"name":"kfp-launcher","image":"gcr.io/ml-pipeline/kfp-launcher:1.8.7","command":["launcher","--copy","/kfp-launcher/launch"],"resources":{},"mirrorVolumeMounts":true}]},{"name":"dummy-component-2","inputs":{"parameters":[{"name":"dummy-component-Output"},{"name":"pipeline-name"},{"name":"pipeline-root"}]},"outputs":{"parameters":[{"name":"dummy-component-2-Output","valueFrom":{"path":"/tmp/outputs/Output/data"}}],"artifacts":[{"name":"dummy-component-2-Output","path":"/tmp/outputs/Output/data"}]},"metadata":{"annotations":{"pipelines.kubeflow.org/arguments.parameters":"{\\"a\\": \\"{{inputs.parameters.dummy-component-Output}}\\"}","pipelines.kubeflow.org/component_ref":"{}","pipelines.kubeflow.org/v2_component":"true","sidecar.istio.io/inject":"false"},"labels":{"pipelines.kubeflow.org/cache_enabled":"true","pipelines.kubeflow.org/enable_caching":"false","pipelines.kubeflow.org/kfp_sdk_version":"1.8.9","pipelines.kubeflow.org/pipeline-sdk-type":"kfp","pipelines.kubeflow.org/v2_component":"true"}},"container":{"name":"","image":"python:3.7","command":["/kfp-launcher/launch","--mlmd_server_address","$(METADATA_GRPC_SERVICE_HOST)","--mlmd_server_port","$(METADATA_GRPC_SERVICE_PORT)","--runtime_info_json","$(KFP_V2_RUNTIME_INFO)","--container_image","$(KFP_V2_IMAGE)","--task_name","dummy-component-2","--pipeline_name","{{inputs.parameters.pipeline-name}}","--run_id","$(KFP_RUN_ID)","--run_resource","workflows.argoproj.io/$(WORKFLOW_ID)","--namespace","$(KFP_NAMESPACE)","--pod_name","$(KFP_POD_NAME)","--pod_uid","$(KFP_POD_UID)","--pipeline_root","{{inputs.parameters.pipeline-root}}","--enable_caching","$(ENABLE_CACHING)","--","a={{inputs.parameters.dummy-component-Output}}","--"],"args":["sh","-c","(PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location \'comet_ml\' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location \'comet_ml\' --user) \\u0026\\u0026 \\"$0\\" \\"$@\\"","sh","-ec","program_path=$(mktemp)\\nprintf \\"%s\\" \\"$0\\" \\u003e \\"$program_path\\"\\npython3 -u \\"$program_path\\" \\"$@\\"\\n","def dummy_component(a, b= None):\\n    from comet_ml import Experiment\\n    import time\\n    import math\\n    import random\\n\\n    experiment = Experiment(\\n        api_key=\\"AnldYMXVqERr0n7Q3TKiBI4LI\\",\\n        project_name=\\"kubeflow_test\\",\\n        workspace=\\"jacques-comet\\",\\n    )\\n    experiment.log_other(\'kubeflow_run_id\', \'3d544f4e-45de-4527-abcc-98fc9a49b52d\')\\n    experiment.log_other(\'kubeflow_task_name\', \'3d544f4e-45de-4527-abcc-98fc9a49b52d-{{pod.name}}\')\\n    experiment.log_other(\'kubeflow_task_type\', \'task\')\\n\\n    for i in range(60):\\n        experiment.log_metric(\'accuracy\', math.log(i + random.random()))\\n        time.sleep(0.1)\\n    experiment.end()\\n\\n    return a\\n\\ndef _serialize_str(str_value: str) -\\u003e str:\\n    if not isinstance(str_value, str):\\n        raise TypeError(\'Value \\"{}\\" has type \\"{}\\" instead of str.\'.format(\\n            str(str_value), str(type(str_value))))\\n    return str_value\\n\\nimport argparse\\n_parser = argparse.ArgumentParser(prog=\'Dummy component\', description=\'\')\\n_parser.add_argument(\\"--a\\", dest=\\"a\\", type=str, required=True, default=argparse.SUPPRESS)\\n_parser.add_argument(\\"--b\\", dest=\\"b\\", type=str, required=False, default=argparse.SUPPRESS)\\n_parser.add_argument(\\"----output-paths\\", dest=\\"_output_paths\\", type=str, nargs=1)\\n_parsed_args = vars(_parser.parse_args())\\n_output_files = _parsed_args.pop(\\"_output_paths\\", [])\\n\\n_outputs = dummy_component(**_parsed_args)\\n\\n_outputs = [_outputs]\\n\\n_output_serializers = [\\n    _serialize_str,\\n\\n]\\n\\nimport os\\nfor idx, output_file in enumerate(_output_files):\\n    try:\\n        os.makedirs(os.path.dirname(output_file))\\n    except OSError:\\n        pass\\n    with open(output_file, \'w\') as f:\\n        f.write(_output_serializers[idx](_outputs[idx]))\\n","--a","{{$.inputs.parameters[\'a\']}}","----output-paths","{{$.outputs.parameters[\'Output\'].output_file}}"],"envFrom":[{"configMapRef":{"name":"metadata-grpc-configmap","optional":true}}],"env":[{"name":"KFP_POD_NAME","valueFrom":{"fieldRef":{"fieldPath":"metadata.name"}}},{"name":"KFP_POD_UID","valueFrom":{"fieldRef":{"fieldPath":"metadata.uid"}}},{"name":"KFP_NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}},{"name":"WORKFLOW_ID","valueFrom":{"fieldRef":{"fieldPath":"metadata.labels[\'workflows.argoproj.io/workflow\']"}}},{"name":"KFP_RUN_ID","valueFrom":{"fieldRef":{"fieldPath":"metadata.labels[\'pipeline/runid\']"}}},{"name":"ENABLE_CACHING","valueFrom":{"fieldRef":{"fieldPath":"metadata.labels[\'pipelines.kubeflow.org/enable_caching\']"}}},{"name":"KFP_V2_IMAGE","value":"python:3.7"},{"name":"KFP_V2_RUNTIME_INFO","value":"{\\"inputParameters\\": {\\"a\\": {\\"type\\": \\"STRING\\"}}, \\"inputArtifacts\\": {}, \\"outputParameters\\": {\\"Output\\": {\\"type\\": \\"STRING\\", \\"path\\": \\"/tmp/outputs/Output/data\\"}}, \\"outputArtifacts\\": {}}"}],"resources":{},"volumeMounts":[{"name":"kfp-launcher","mountPath":"/kfp-launcher"}]},"volumes":[{"name":"kfp-launcher"}],"initContainers":[{"name":"kfp-launcher","image":"gcr.io/ml-pipeline/kfp-launcher:1.8.7","command":["launcher","--copy","/kfp-launcher/launch"],"resources":{},"mirrorVolumeMounts":true}]},{"name":"dummy-component-3","inputs":{"parameters":[{"name":"dummy-component-Output"},{"name":"pipeline-name"},{"name":"pipeline-root"}]},"outputs":{"parameters":[{"name":"dummy-component-3-Output","valueFrom":{"path":"/tmp/outputs/Output/data"}}],"artifacts":[{"name":"dummy-component-3-Output","path":"/tmp/outputs/Output/data"}]},"metadata":{"annotations":{"pipelines.kubeflow.org/arguments.parameters":"{\\"a\\": \\"{{inputs.parameters.dummy-component-Output}}\\"}","pipelines.kubeflow.org/component_ref":"{}","pipelines.kubeflow.org/v2_component":"true","sidecar.istio.io/inject":"false"},"labels":{"pipelines.kubeflow.org/cache_enabled":"true","pipelines.kubeflow.org/enable_caching":"false","pipelines.kubeflow.org/kfp_sdk_version":"1.8.9","pipelines.kubeflow.org/pipeline-sdk-type":"kfp","pipelines.kubeflow.org/v2_component":"true"}},"container":{"name":"","image":"python:3.7","command":["/kfp-launcher/launch","--mlmd_server_address","$(METADATA_GRPC_SERVICE_HOST)","--mlmd_server_port","$(METADATA_GRPC_SERVICE_PORT)","--runtime_info_json","$(KFP_V2_RUNTIME_INFO)","--container_image","$(KFP_V2_IMAGE)","--task_name","dummy-component-3","--pipeline_name","{{inputs.parameters.pipeline-name}}","--run_id","$(KFP_RUN_ID)","--run_resource","workflows.argoproj.io/$(WORKFLOW_ID)","--namespace","$(KFP_NAMESPACE)","--pod_name","$(KFP_POD_NAME)","--pod_uid","$(KFP_POD_UID)","--pipeline_root","{{inputs.parameters.pipeline-root}}","--enable_caching","$(ENABLE_CACHING)","--","a={{inputs.parameters.dummy-component-Output}}","--"],"args":["sh","-c","(PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location \'comet_ml\' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location \'comet_ml\' --user) \\u0026\\u0026 \\"$0\\" \\"$@\\"","sh","-ec","program_path=$(mktemp)\\nprintf \\"%s\\" \\"$0\\" \\u003e \\"$program_path\\"\\npython3 -u \\"$program_path\\" \\"$@\\"\\n","def dummy_component(a, b= None):\\n    from comet_ml import Experiment\\n    import time\\n    import math\\n    import random\\n\\n    experiment = Experiment(\\n        api_key=\\"AnldYMXVqERr0n7Q3TKiBI4LI\\",\\n        project_name=\\"kubeflow_test\\",\\n        workspace=\\"jacques-comet\\",\\n    )\\n    experiment.log_other(\'kubeflow_run_id\', \'3d544f4e-45de-4527-abcc-98fc9a49b52d\')\\n    experiment.log_other(\'kubeflow_task_name\', \'3d544f4e-45de-4527-abcc-98fc9a49b52d-{{pod.name}}\')\\n    experiment.log_other(\'kubeflow_task_type\', \'task\')\\n\\n    for i in range(60):\\n        experiment.log_metric(\'accuracy\', math.log(i + random.random()))\\n        time.sleep(0.1)\\n    experiment.end()\\n\\n    return a\\n\\ndef _serialize_str(str_value: str) -\\u003e str:\\n    if not isinstance(str_value, str):\\n        raise TypeError(\'Value \\"{}\\" has type \\"{}\\" instead of str.\'.format(\\n            str(str_value), str(type(str_value))))\\n    return str_value\\n\\nimport argparse\\n_parser = argparse.ArgumentParser(prog=\'Dummy component\', description=\'\')\\n_parser.add_argument(\\"--a\\", dest=\\"a\\", type=str, required=True, default=argparse.SUPPRESS)\\n_parser.add_argument(\\"--b\\", dest=\\"b\\", type=str, required=False, default=argparse.SUPPRESS)\\n_parser.add_argument(\\"----output-paths\\", dest=\\"_output_paths\\", type=str, nargs=1)\\n_parsed_args = vars(_parser.parse_args())\\n_output_files = _parsed_args.pop(\\"_output_paths\\", [])\\n\\n_outputs = dummy_component(**_parsed_args)\\n\\n_outputs = [_outputs]\\n\\n_output_serializers = [\\n    _serialize_str,\\n\\n]\\n\\nimport os\\nfor idx, output_file in enumerate(_output_files):\\n    try:\\n        os.makedirs(os.path.dirname(output_file))\\n    except OSError:\\n        pass\\n    with open(output_file, \'w\') as f:\\n        f.write(_output_serializers[idx](_outputs[idx]))\\n","--a","{{$.inputs.parameters[\'a\']}}","----output-paths","{{$.outputs.parameters[\'Output\'].output_file}}"],"envFrom":[{"configMapRef":{"name":"metadata-grpc-configmap","optional":true}}],"env":[{"name":"KFP_POD_NAME","valueFrom":{"fieldRef":{"fieldPath":"metadata.name"}}},{"name":"KFP_POD_UID","valueFrom":{"fieldRef":{"fieldPath":"metadata.uid"}}},{"name":"KFP_NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}},{"name":"WORKFLOW_ID","valueFrom":{"fieldRef":{"fieldPath":"metadata.labels[\'workflows.argoproj.io/workflow\']"}}},{"name":"KFP_RUN_ID","valueFrom":{"fieldRef":{"fieldPath":"metadata.labels[\'pipeline/runid\']"}}},{"name":"ENABLE_CACHING","valueFrom":{"fieldRef":{"fieldPath":"metadata.labels[\'pipelines.kubeflow.org/enable_caching\']"}}},{"name":"KFP_V2_IMAGE","value":"python:3.7"},{"name":"KFP_V2_RUNTIME_INFO","value":"{\\"inputParameters\\": {\\"a\\": {\\"type\\": \\"STRING\\"}}, \\"inputArtifacts\\": {}, \\"outputParameters\\": {\\"Output\\": {\\"type\\": \\"STRING\\", \\"path\\": \\"/tmp/outputs/Output/data\\"}}, \\"outputArtifacts\\": {}}"}],"resources":{},"volumeMounts":[{"name":"kfp-launcher","mountPath":"/kfp-launcher"}]},"volumes":[{"name":"kfp-launcher"}],"initContainers":[{"name":"kfp-launcher","image":"gcr.io/ml-pipeline/kfp-launcher:1.8.7","command":["launcher","--copy","/kfp-launcher/launch"],"resources":{},"mirrorVolumeMounts":true}]},{"name":"dummy-component-4","inputs":{"parameters":[{"name":"dummy-component-2-Output"},{"name":"dummy-component-3-Output"},{"name":"pipeline-name"},{"name":"pipeline-root"}]},"outputs":{"artifacts":[{"name":"dummy-component-4-Output","path":"/tmp/outputs/Output/data"}]},"metadata":{"annotations":{"pipelines.kubeflow.org/arguments.parameters":"{\\"a\\": \\"{{inputs.parameters.dummy-component-2-Output}}\\", \\"b\\": \\"{{inputs.parameters.dummy-component-3-Output}}\\"}","pipelines.kubeflow.org/component_ref":"{}","pipelines.kubeflow.org/v2_component":"true","sidecar.istio.io/inject":"false"},"labels":{"pipelines.kubeflow.org/cache_enabled":"true","pipelines.kubeflow.org/enable_caching":"false","pipelines.kubeflow.org/kfp_sdk_version":"1.8.9","pipelines.kubeflow.org/pipeline-sdk-type":"kfp","pipelines.kubeflow.org/v2_component":"true"}},"container":{"name":"","image":"python:3.7","command":["/kfp-launcher/launch","--mlmd_server_address","$(METADATA_GRPC_SERVICE_HOST)","--mlmd_server_port","$(METADATA_GRPC_SERVICE_PORT)","--runtime_info_json","$(KFP_V2_RUNTIME_INFO)","--container_image","$(KFP_V2_IMAGE)","--task_name","dummy-component-4","--pipeline_name","{{inputs.parameters.pipeline-name}}","--run_id","$(KFP_RUN_ID)","--run_resource","workflows.argoproj.io/$(WORKFLOW_ID)","--namespace","$(KFP_NAMESPACE)","--pod_name","$(KFP_POD_NAME)","--pod_uid","$(KFP_POD_UID)","--pipeline_root","{{inputs.parameters.pipeline-root}}","--enable_caching","$(ENABLE_CACHING)","--","a={{inputs.parameters.dummy-component-2-Output}}","b={{inputs.parameters.dummy-component-3-Output}}","--"],"args":["sh","-c","(PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location \'comet_ml\' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location \'comet_ml\' --user) \\u0026\\u0026 \\"$0\\" \\"$@\\"","sh","-ec","program_path=$(mktemp)\\nprintf \\"%s\\" \\"$0\\" \\u003e \\"$program_path\\"\\npython3 -u \\"$program_path\\" \\"$@\\"\\n","def dummy_component(a, b= None):\\n    from comet_ml import Experiment\\n    import time\\n    import math\\n    import random\\n\\n    experiment = Experiment(\\n        api_key=\\"AnldYMXVqERr0n7Q3TKiBI4LI\\",\\n        project_name=\\"kubeflow_test\\",\\n        workspace=\\"jacques-comet\\",\\n    )\\n    experiment.log_other(\'kubeflow_run_id\', \'3d544f4e-45de-4527-abcc-98fc9a49b52d\')\\n    experiment.log_other(\'kubeflow_task_name\', \'3d544f4e-45de-4527-abcc-98fc9a49b52d-{{pod.name}}\')\\n    experiment.log_other(\'kubeflow_task_type\', \'task\')\\n\\n    for i in range(60):\\n        experiment.log_metric(\'accuracy\', math.log(i + random.random()))\\n        time.sleep(0.1)\\n    experiment.end()\\n\\n    return a\\n\\ndef _serialize_str(str_value: str) -\\u003e str:\\n    if not isinstance(str_value, str):\\n        raise TypeError(\'Value \\"{}\\" has type \\"{}\\" instead of str.\'.format(\\n            str(str_value), str(type(str_value))))\\n    return str_value\\n\\nimport argparse\\n_parser = argparse.ArgumentParser(prog=\'Dummy component\', description=\'\')\\n_parser.add_argument(\\"--a\\", dest=\\"a\\", type=str, required=True, default=argparse.SUPPRESS)\\n_parser.add_argument(\\"--b\\", dest=\\"b\\", type=str, required=False, default=argparse.SUPPRESS)\\n_parser.add_argument(\\"----output-paths\\", dest=\\"_output_paths\\", type=str, nargs=1)\\n_parsed_args = vars(_parser.parse_args())\\n_output_files = _parsed_args.pop(\\"_output_paths\\", [])\\n\\n_outputs = dummy_component(**_parsed_args)\\n\\n_outputs = [_outputs]\\n\\n_output_serializers = [\\n    _serialize_str,\\n\\n]\\n\\nimport os\\nfor idx, output_file in enumerate(_output_files):\\n    try:\\n        os.makedirs(os.path.dirname(output_file))\\n    except OSError:\\n        pass\\n    with open(output_file, \'w\') as f:\\n        f.write(_output_serializers[idx](_outputs[idx]))\\n","--a","{{$.inputs.parameters[\'a\']}}","--b","{{$.inputs.parameters[\'b\']}}","----output-paths","{{$.outputs.parameters[\'Output\'].output_file}}"],"envFrom":[{"configMapRef":{"name":"metadata-grpc-configmap","optional":true}}],"env":[{"name":"KFP_POD_NAME","valueFrom":{"fieldRef":{"fieldPath":"metadata.name"}}},{"name":"KFP_POD_UID","valueFrom":{"fieldRef":{"fieldPath":"metadata.uid"}}},{"name":"KFP_NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}},{"name":"WORKFLOW_ID","valueFrom":{"fieldRef":{"fieldPath":"metadata.labels[\'workflows.argoproj.io/workflow\']"}}},{"name":"KFP_RUN_ID","valueFrom":{"fieldRef":{"fieldPath":"metadata.labels[\'pipeline/runid\']"}}},{"name":"ENABLE_CACHING","valueFrom":{"fieldRef":{"fieldPath":"metadata.labels[\'pipelines.kubeflow.org/enable_caching\']"}}},{"name":"KFP_V2_IMAGE","value":"python:3.7"},{"name":"KFP_V2_RUNTIME_INFO","value":"{\\"inputParameters\\": {\\"a\\": {\\"type\\": \\"STRING\\"}, \\"b\\": {\\"type\\": \\"STRING\\"}}, \\"inputArtifacts\\": {}, \\"outputParameters\\": {\\"Output\\": {\\"type\\": \\"STRING\\", \\"path\\": \\"/tmp/outputs/Output/data\\"}}, \\"outputArtifacts\\": {}}"}],"resources":{},"volumeMounts":[{"name":"kfp-launcher","mountPath":"/kfp-launcher"}]},"volumes":[{"name":"kfp-launcher"}],"initContainers":[{"name":"kfp-launcher","image":"gcr.io/ml-pipeline/kfp-launcher:1.8.7","command":["launcher","--copy","/kfp-launcher/launch"],"resources":{},"mirrorVolumeMounts":true}]}],"entrypoint":"basic-comet-pipeline","arguments":{"parameters":[{"name":"pipeline-root","value":""},{"name":"pipeline-name","value":"pipeline/Basic Comet Pipeline"}]},"serviceAccountName":"pipeline-runner","podMetadata":{"labels":{"pipeline/runid":"3d544f4e-45de-4527-abcc-98fc9a49b52d"}}},"status":{"phase":"Running","startedAt":"2022-01-12T20:46:18Z","finishedAt":null,"progress":"1/4","nodes":{"basic-comet-pipeline-5vwc2":{"id":"basic-comet-pipeline-5vwc2","name":"basic-comet-pipeline-5vwc2","displayName":"basic-comet-pipeline-5vwc2","type":"DAG","templateName":"basic-comet-pipeline","templateScope":"local/basic-comet-pipeline-5vwc2","phase":"Running","startedAt":"2022-01-12T20:46:18Z","finishedAt":null,"progress":"1/4","inputs":{"parameters":[{"name":"pipeline-name","value":"pipeline/Basic Comet Pipeline"},{"name":"pipeline-root","value":""}]},"children":["basic-comet-pipeline-5vwc2-1265089486","basic-comet-pipeline-5vwc2-2376407533"]},"basic-comet-pipeline-5vwc2-1265089486":{"id":"basic-comet-pipeline-5vwc2-1265089486","name":"basic-comet-pipeline-5vwc2.comet-logger","displayName":"comet-logger","type":"Pod","templateName":"comet-logger","templateScope":"local/basic-comet-pipeline-5vwc2","phase":"Running","boundaryID":"basic-comet-pipeline-5vwc2","startedAt":"2022-01-12T20:46:18Z","finishedAt":null,"progress":"0/1","inputs":{"parameters":[{"name":"pipeline-name","value":"pipeline/Basic Comet Pipeline"},{"name":"pipeline-root","value":""}]},"hostNodeName":"minikube"},"basic-comet-pipeline-5vwc2-2376407533":{"id":"basic-comet-pipeline-5vwc2-2376407533","name":"basic-comet-pipeline-5vwc2.dummy-component","displayName":"dummy-component","type":"Pod","templateName":"dummy-component","templateScope":"local/basic-comet-pipeline-5vwc2","phase":"Succeeded","boundaryID":"basic-comet-pipeline-5vwc2","startedAt":"2022-01-12T20:46:18Z","finishedAt":"2022-01-12T20:46:43Z","progress":"1/1","resourcesDuration":{"cpu":43,"memory":28},"inputs":{"parameters":[{"name":"pipeline-name","value":"pipeline/Basic Comet Pipeline"},{"name":"pipeline-root","value":""}]},"outputs":{"parameters":[{"name":"dummy-component-Output","value":"test","valueFrom":{"path":"/tmp/outputs/Output/data"}}],"artifacts":[{"name":"dummy-component-Output","path":"/tmp/outputs/Output/data","s3":{"key":"artifacts/basic-comet-pipeline-5vwc2/2022/01/12/basic-comet-pipeline-5vwc2-2376407533/dummy-component-Output.tgz"}},{"name":"main-logs","s3":{"key":"artifacts/basic-comet-pipeline-5vwc2/2022/01/12/basic-comet-pipeline-5vwc2-2376407533/main.log"}}],"exitCode":"0"},"children":["basic-comet-pipeline-5vwc2-2893897334","basic-comet-pipeline-5vwc2-2910674953"],"hostNodeName":"minikube"},"basic-comet-pipeline-5vwc2-2893897334":{"id":"basic-comet-pipeline-5vwc2-2893897334","name":"basic-comet-pipeline-5vwc2.dummy-component-2","displayName":"dummy-component-2","type":"Pod","templateName":"dummy-component-2","templateScope":"local/basic-comet-pipeline-5vwc2","phase":"Running","boundaryID":"basic-comet-pipeline-5vwc2","startedAt":"2022-01-12T20:46:53Z","finishedAt":null,"progress":"0/1","inputs":{"parameters":[{"name":"dummy-component-Output","value":"test"},{"name":"pipeline-name","value":"pipeline/Basic Comet Pipeline"},{"name":"pipeline-root","value":""}]},"hostNodeName":"minikube"},"basic-comet-pipeline-5vwc2-2910674953":{"id":"basic-comet-pipeline-5vwc2-2910674953","name":"basic-comet-pipeline-5vwc2.dummy-component-3","displayName":"dummy-component-3","type":"Pod","templateName":"dummy-component-3","templateScope":"local/basic-comet-pipeline-5vwc2","phase":"Running","boundaryID":"basic-comet-pipeline-5vwc2","startedAt":"2022-01-12T20:46:53Z","finishedAt":null,"progress":"0/1","inputs":{"parameters":[{"name":"dummy-component-Output","value":"test"},{"name":"pipeline-name","value":"pipeline/Basic Comet Pipeline"},{"name":"pipeline-root","value":""}]},"hostNodeName":"minikube"}},"conditions":[{"type":"PodRunning","status":"True"}],"resourcesDuration":{"cpu":43,"memory":28},"artifactRepositoryRef":{"default":true,"artifactRepository":{"archiveLogs":true,"s3":{"endpoint":"minio-service.kubeflow:9000","bucket":"mlpipeline","insecure":true,"accessKeySecret":{"name":"mlpipeline-minio-artifact","key":"accesskey"},"secretKeySecret":{"name":"mlpipeline-minio-artifact","key":"secretkey"},"keyFormat":"artifacts/{{workflow.name}}/{{workflow.creationTimestamp.Y}}/{{workflow.creationTimestamp.m}}/{{workflow.creationTimestamp.d}}/{{pod.name}}"}}}}}'
  }
};
